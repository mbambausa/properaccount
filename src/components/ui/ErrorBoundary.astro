---
// src/components/ui/ErrorBoundary.astro
interface Props {
  fallback?: string;
}

const { fallback = "Something went wrong. Please try again later." } = Astro.props;
---

<error-boundary data-fallback={fallback}>
  <slot />
</error-boundary>

<script>
  class ErrorBoundaryElement extends HTMLElement {
    // Explicitly declare the property
    private originalContent: Node[] | null = null;

    constructor() {
      super();
      this.handleError = this.handleError.bind(this);
      this.handlePromiseError = this.handlePromiseError.bind(this);
    }

    connectedCallback(): void {
      window.addEventListener('error', this.handleError);
      window.addEventListener('unhandledrejection', this.handlePromiseError);
    }

    disconnectedCallback(): void {
      window.removeEventListener('error', this.handleError);
      window.removeEventListener('unhandledrejection', this.handlePromiseError);
    }

    handleError(event: ErrorEvent): void {
      console.error('Error caught by boundary:', event.error);
      this.showErrorMessage(event.error?.message || 'An unexpected error occurred');
      event.preventDefault();
    }

    handlePromiseError(event: PromiseRejectionEvent): void {
      console.error('Promise error caught by boundary:', event.reason);
      this.showErrorMessage(event.reason?.message || 'An async operation failed');
      event.preventDefault();
    }

    showErrorMessage(message: string): void {
      const fallback = this.getAttribute('data-fallback') || 'Something went wrong.';
      
      // Save the original content
      if (!this.originalContent) {
        this.originalContent = Array.from(this.childNodes);
      }
      
      // Clear current content
      this.innerHTML = '';
      
      // Create error message element using HSL variables for colors
      const errorDiv = document.createElement('div');
      errorDiv.className = 'bg-danger/10 dark:bg-danger/20 border-l-4 border-danger p-4 my-4 rounded-md';
      errorDiv.setAttribute('role', 'alert');
      
      errorDiv.innerHTML = `
        <div class="flex">
          <div class="flex-shrink-0">
            <div class="i-carbon-warning-alt h-5 w-5 text-danger"></div>
          </div>
          <div class="ml-3">
            <p class="text-sm font-medium text-neutral-900 dark:text-neutral-100">${fallback}</p>
            <p class="text-xs text-danger dark:text-danger mt-1">${message}</p>
          </div>
        </div>
        <button class="mt-2 text-sm text-danger hover:text-danger/80 dark:text-danger dark:hover:text-danger/80 hover:underline transition-colors duration-150">Retry</button>
      `;
      
      // Add retry button handler
      const retryBtn = errorDiv.querySelector('button');
      if (retryBtn) {
        retryBtn.addEventListener('click', () => this.retry());
      }
      
      this.appendChild(errorDiv);
    }
    
    retry(): void {
      if (this.originalContent) {
        // Clear current content
        this.innerHTML = '';
        
        // Restore original content
        this.originalContent.forEach((node: Node) => {
          this.appendChild(node.cloneNode(true));
        });
      }
    }
  }

  customElements.define('error-boundary', ErrorBoundaryElement);
</script>