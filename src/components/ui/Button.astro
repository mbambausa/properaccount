---
// src/components/ui/Button.astro
export type ButtonType = 'button' | 'submit' | 'reset';
export type ButtonVariant = 'primary' | 'secondary' | 'outline' | 'text' | 'danger';
export type ButtonSize = 'xs' | 'sm' | 'md' | 'lg' | 'xl';

export interface Props {
  as?: 'button' | 'a';
  href?: string;
  type?: ButtonType;
  variant?: ButtonVariant;
  size?: ButtonSize;
  fullWidth?: boolean;
  disabled?: boolean;
  loading?: boolean;
  loadingText?: string;
  form?: string;
  id?: string;
  class?: string;
  'data-testid'?: string;
  target?: string;
  rel?: string;
}

const {
  as = Astro.props.href ? 'a' : 'button',
  href,
  type = 'button' as ButtonType,
  variant = 'primary' as ButtonVariant,
  size = 'md' as ButtonSize,
  fullWidth = false,
  disabled = false,
  loading = false,
  loadingText,
  form,
  id,
  class: userClassName = '',
  'data-testid': dataTestId,
  target,
  rel,
} = Astro.props as Props;

// Class logic
const sizeClasses: Record<ButtonSize, string> = {
  xs: 'text-xs px-2.5 py-1.5 rounded-sm',
  sm: 'text-sm px-3 py-2 rounded',
  md: 'text-base px-4 py-2 rounded-md',
  lg: 'text-lg px-5 py-2.5 rounded-lg',
  xl: 'text-xl px-6 py-3 rounded-lg',
};

const variantClasses: Record<ButtonVariant, string> = {
  primary: 'btn-primary',
  secondary: 'btn-secondary',
  outline: 'border-2 border-primary-500 bg-transparent text-primary-600 hover:bg-primary-50 focus:ring-primary-500 dark:text-primary-400 dark:border-primary-400 dark:hover:bg-primary-900/30',
  text: 'bg-transparent text-primary-600 hover:bg-primary-50 hover:underline focus:ring-primary-500 dark:text-primary-400 dark:hover:bg-primary-900/20',
  danger: 'bg-danger text-white hover:bg-danger/90 focus:ring-danger dark:bg-danger dark:hover:bg-danger/80',
};

const currentSizeClass = sizeClasses[size];
const currentVariantClass = variantClasses[variant];

let combinedClasses = [
  'btn',
  currentSizeClass,
  currentVariantClass,
  fullWidth ? 'w-full' : '',
  loading ? 'opacity-75 cursor-not-allowed pointer-events-none' : '',
  (disabled && as === 'button') ? 'opacity-50 cursor-not-allowed' : '',
  userClassName,
].filter(Boolean).join(' ');

let linkAriaDisabled: 'true' | undefined = undefined;
let linkTabIndex: number | undefined = undefined;

if (as === 'a' && (disabled || loading)) {
  combinedClasses = `${combinedClasses} opacity-50 cursor-not-allowed pointer-events-none`.trim().split(' ').filter((v, i, a) => a.indexOf(v) === i).join(' ');
  linkAriaDisabled = 'true';
  linkTabIndex = -1;
}

const loadingEmoji = "‚è≥";
---

{as === 'button' ? (
  <button
    id={id}
    class={combinedClasses}
    data-testid={dataTestId}
    type={type}
    disabled={disabled || loading}
    form={form}
    aria-live={loading ? 'polite' : undefined}
    aria-busy={loading ? 'true' : undefined}
  >
    {loading && (
      <span class="inline-flex items-center leading-none mr-2" aria-hidden="true">
        {loadingEmoji}
      </span>
    )}
    {loading && loadingText ? loadingText : <slot />}
  </button>
) : (
  <a
    id={id}
    class={combinedClasses}
    data-testid={dataTestId}
    href={disabled || loading ? undefined : href}
    target={target}
    rel={rel}
    aria-disabled={linkAriaDisabled || (loading ? 'true' : undefined)}
    tabindex={linkTabIndex ?? (loading ? -1 : undefined)}
    role={href && href !== '#' ? undefined : "button"}
  >
    {loading && (
      <span class="inline-flex items-center leading-none mr-2" aria-hidden="true">
        {loadingEmoji}
      </span>
    )}
    {loading && loadingText ? loadingText : <slot />}
  </a>
)}
