---
// src/components/ui/Form.astro
export interface Props {
  preventDefaults?: boolean;
  action?: string;
  method?: 'get' | 'post' | 'put' | 'delete' | 'patch'; // Made method more specific
  enctype?: 'application/x-www-form-urlencoded' | 'multipart/form-data' | 'text/plain' | 'application/json';
  id?: string;
  name?: string;
  class?: string;
  'data-testid'?: string;
  autocomplete?: string;
  novalidate?: boolean; // Use 'novalidate' (all lowercase) for HTML attribute consistency
  target?: string;
  // 'rel' is not a valid attribute for <form> elements
}

const {
  preventDefaults = false,
  action,
  method = 'post', // Default to POST if not specified
  enctype = 'application/x-www-form-urlencoded',
  id,
  name,
  class: userClassName,
  'data-testid': dataTestId,
  autocomplete,
  novalidate, // Will be used as noValidate
  target,
  // rel, // Removed rel
} = Astro.props as Props; // Cast to ensure all props are recognized

// HTML form method can only be GET or POST. Others are for JS/data-method.
const formHtmlMethod = method.toUpperCase() === 'GET' ? 'GET' : 'POST';
---

<form
  action={action}
  method={formHtmlMethod}
  enctype={enctype}
  id={id}
  name={name}
  class={userClassName}
  data-testid={dataTestId}
  autocomplete={autocomplete}
  {...(novalidate ? { noValidate: true } : {})}
  target={target}
  data-prevent-defaults={preventDefaults ? 'true' : undefined}
  {...(preventDefaults && method.toUpperCase() !== 'GET' && method.toUpperCase() !== 'POST' ? { 'data-method': method.toUpperCase() } : {})}
>
  <slot />
</form>

{preventDefaults && (
  <script is:inline> // Ensure script is treated as plain JS by Astro
    (function () {
      const LOADING_EMOJI_HTML = `
        <span class="inline-flex items-center leading-none mr-2 form-submit-spinner" aria-hidden="true">
          ‚è≥
        </span>`;
      const originalButtonContentStore = new Map();

      /**
       * @param {HTMLButtonElement} button
       * @param {boolean} isLoading
       */
      function setButtonLoadingState(button, isLoading) {
        if (!button) return;
        if (isLoading) {
          button.setAttribute('disabled', 'true');
          button.classList.add('opacity-75', 'cursor-not-allowed');
          button.setAttribute('aria-busy', 'true');
          if (!originalButtonContentStore.has(button)) {
            originalButtonContentStore.set(button, button.innerHTML);
          }
          if (!button.querySelector('.form-submit-spinner')) {
            const originalContent = originalButtonContentStore.get(button) || '';
            const loadingText = button.dataset.loadingText;
            if (loadingText && !originalContent.includes(loadingText)) {
              button.innerHTML = LOADING_EMOJI_HTML + loadingText;
            } else {
              button.innerHTML = LOADING_EMOJI_HTML + originalContent;
            }
          }
        } else {
          button.removeAttribute('disabled');
          button.classList.remove('opacity-75', 'cursor-not-allowed');
          button.removeAttribute('aria-busy');
          if (originalButtonContentStore.has(button)) {
            button.innerHTML = originalButtonContentStore.get(button);
            originalButtonContentStore.delete(button);
          }
        }
      }

      document.addEventListener('DOMContentLoaded', function () {
        /** @type {NodeListOf<HTMLFormElement>} */
        var forms = document.querySelectorAll('form[data-prevent-defaults="true"]');
        
        forms.forEach(function (formEl) {
          if (!(formEl instanceof HTMLFormElement)) return;
          /** @type {HTMLFormElement} */
          const form = formEl;

          form.addEventListener('submit', async function (/** @type {SubmitEvent} */ e) {
            e.preventDefault();

            var formData = new FormData(form);
            var actionUrl = form.getAttribute('action') || window.location.href;
            var formMethodAttr = (form.getAttribute('data-method') || form.getAttribute('method') || 'POST').toUpperCase();
            var formEnctype = form.getAttribute('enctype');

            /** @type {HTMLButtonElement | null} */
            var submitter = (e.submitter instanceof HTMLButtonElement) ? e.submitter : null;
            /** @type {HTMLButtonElement[]} */
            var submitButtons = submitter ? [submitter] : Array.from(form.querySelectorAll('button[type="submit"]'));

            submitButtons.forEach(function (btn) {
              setButtonLoadingState(btn, true);
            });

            /** @type {any} */
            var responseResult = null;
            var responseOk = false;
            var responseStatus = 0;

            try {
              var headers = new Headers();
              /** @type {BodyInit | null} */
              var body = null;

              if (formEnctype === 'application/json') {
                /** @type {Record<string, FormDataEntryValue>} */
                var object = {};
                formData.forEach(function (value, key) {
                  object[key] = value;
                });
                body = JSON.stringify(object);
                headers.set('Content-Type', 'application/json');
              } else if (formMethodAttr !== 'GET' && formMethodAttr !== 'HEAD') {
                body = formData;
                if (formEnctype && formEnctype !== 'multipart/form-data') {
                  headers.set('Content-Type', formEnctype);
                }
              }

              headers.set('Accept', 'application/json, text/html, */*');

              /** @type {HTMLInputElement | null} */
              var csrfTokenInput = form.querySelector('input[name="_csrf"]');
              if (csrfTokenInput && typeof csrfTokenInput.value === 'string') {
                headers.set('X-CSRF-Token', csrfTokenInput.value);
              } else {
                /** @type {HTMLMetaElement | null} */
                var csrfMeta = document.querySelector('meta[name="csrf-token"]');
                if (csrfMeta && typeof csrfMeta.content === 'string') {
                  headers.set('X-CSRF-Token', csrfMeta.content);
                }
              }

              /** @type {RequestInit} */
              var fetchOptions = {
                method: formMethodAttr,
                headers: headers,
              };
              if (body !== null) { // Only add body if it's not null
                  fetchOptions.body = body;
              }

              var response = await fetch(actionUrl, fetchOptions);
              responseOk = response.ok;
              responseStatus = response.status;

              var contentType = response.headers.get("content-type");
              if (contentType && contentType.includes("application/json")) {
                responseResult = await response.json();
              } else {
                responseResult = { responseText: await response.text(), status: response.status, ok: response.ok };
              }
              
              // Check if responseResult is an object and has redirectUrl before accessing
              if (responseOk && responseResult && typeof responseResult === 'object' && 'redirectUrl' in responseResult && typeof responseResult.redirectUrl === 'string') {
                window.location.href = responseResult.redirectUrl;
              }

              form.dispatchEvent(new CustomEvent('form:response', {
                detail: { result: responseResult, success: responseOk, status: responseStatus },
                bubbles: true
              }));

            } catch (error) {
              var errMsg = (error instanceof Error) ? error.message : String(error);
              form.dispatchEvent(new CustomEvent('form:error', {
                detail: {
                  error: errMsg,
                  result: responseResult,
                  success: false,
                  status: responseStatus
                },
                bubbles: true
              }));
              console.error('Form submission error:', errMsg);
            } finally {
              submitButtons.forEach(function (btn) {
                setButtonLoadingState(btn, false);
              });
            }
          });
        });
      });
    })();
  </script>
)}