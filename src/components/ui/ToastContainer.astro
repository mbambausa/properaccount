---
// src/components/ui/ToastContainer.astro
// This file remains as per the last correct version you had,
// where the ARIA role was made dynamic.
// The TypeScript errors about window.toastSystem are resolved by updating src/env.d.ts.
---

<div id="toast-container" class="fixed bottom-4 right-4 z-50 flex flex-col-reverse gap-2 max-w-sm w-full sm:w-auto">
  </div>

<script>
  class ToastSystem {
    container: HTMLElement;
    timeouts: Map<string, number> = new Map();

    constructor() {
      this.container = document.getElementById('toast-container') as HTMLElement;
      if (!this.container) {
        console.error('Toast container not found');
        return;
      }
      
      window.addEventListener('toast', ((event: CustomEvent) => {
        const { type, message, duration } = event.detail;
        this.show(type, message, duration);
      }) as EventListener);
    }

    show(type: 'success' | 'error' | 'warning' | 'info', message: string, duration = 5000) {
      const id = 'toast-' + Date.now();
      const toast = this.createToastElement(id, type, message);
      
      toast.classList.add('opacity-0');
      this.container.appendChild(toast);
      
      void toast.offsetWidth;
      
      toast.classList.remove('opacity-0');
      
      if (duration > 0) {
        const timeout = window.setTimeout(() => this.remove(id), duration);
        this.timeouts.set(id, timeout);
      }
      
      return id; // show method returns the toast ID
    }

    remove(id: string) {
      const toast = document.getElementById(id);
      if (toast) {
        toast.classList.add('opacity-0');
        setTimeout(() => toast.remove(), 300); 
        
        if (this.timeouts.has(id)) {
          window.clearTimeout(this.timeouts.get(id));
          this.timeouts.delete(id);
        }
      }
    }

    createToastElement(id: string, type: 'success' | 'error' | 'warning' | 'info', message: string) {
      const toast = document.createElement('div');
      toast.id = id;
      toast.className = 'rounded-md p-4 mb-4 flex items-start shadow-lg transition-opacity duration-300 w-full border-l-4';
      
      const anouncementRole = (type === 'error' || type === 'warning') ? 'alert' : 'status';
      toast.setAttribute('role', anouncementRole);
      
      const styles = {
        success: {
          container: 'bg-success/10 dark:bg-success/20 border-success',
          icon: 'i-carbon-checkmark-filled text-success'
        },
        error: {
          container: 'bg-danger/10 dark:bg-danger/20 border-danger',
          icon: 'i-carbon-warning-filled text-danger'
        },
        warning: {
          container: 'bg-yellow-50 dark:bg-yellow-900/30 border-yellow-500',
          icon: 'i-carbon-warning-alt-filled text-yellow-500'
        },
        info: {
          container: 'bg-primary-50 dark:bg-primary-900/30 border-primary-500',
          icon: 'i-carbon-information-filled text-primary-500'
        }
      };
      
      const style = styles[type] || styles.info;
      toast.classList.add(...style.container.split(' '));

      const icon = document.createElement('div');
      icon.className = 'flex-shrink-0 mr-3';
      icon.innerHTML = `<div class="${style.icon} h-5 w-5"></div>`;

      const messageElement = document.createElement('div');
      messageElement.className = 'flex-1 pt-0.5';
      
      const messageText = document.createElement('p');
      messageText.className = 'text-sm font-medium text-neutral-900 dark:text-neutral-100';
      messageText.textContent = message;
      
      messageElement.appendChild(messageText);
      
      const closeBtn = document.createElement('button');
      closeBtn.type = 'button';
      closeBtn.className = 'ml-4 flex-shrink-0 inline-flex text-neutral-400 hover:text-neutral-500 dark:hover:text-neutral-300 transition-colors duration-150';
      closeBtn.setAttribute('aria-label', 'Close notification');
      closeBtn.innerHTML = '<div class="i-carbon-close h-4 w-4"></div>';
      closeBtn.addEventListener('click', () => this.remove(id));
      
      toast.appendChild(icon);
      toast.appendChild(messageElement);
      toast.appendChild(closeBtn);
      
      return toast;
    }
  }

  document.addEventListener('DOMContentLoaded', () => {
    if (!window.toastSystem) {
      window.toastSystem = new ToastSystem();
    }
  });

  if (typeof window.showToast !== 'function') {
    window.showToast = function(
      type: 'success' | 'error' | 'warning' | 'info',
      message: string,
      duration?: number
    ): string | null { // Ensure return type matches ToastSystem.show
      if (window.toastSystem) {
        return window.toastSystem.show(type, message, duration);
      } else {
        console.error('Toast system not initialized when showToast was called.');
        return null;
      }
    };
  }
</script>