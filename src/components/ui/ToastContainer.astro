---
// src/components/ui/ToastContainer.astro
---

<div id="toast-container" class="fixed bottom-4 right-4 z-50 flex flex-col-reverse gap-2 max-w-sm w-full sm:w-auto">
  <!-- Toast items will be dynamically inserted here -->
</div>

<script>
  class ToastSystem {
    container: HTMLElement;
    timeouts: Map<string, number> = new Map();

    constructor() {
      this.container = document.getElementById('toast-container') as HTMLElement;
      if (!this.container) {
        console.error('Toast container not found');
        return;
      }
      
      // Listen for custom toast events
      window.addEventListener('toast', ((event: CustomEvent) => {
        const { type, message, duration } = event.detail;
        this.show(type, message, duration);
      }) as EventListener);
    }

    show(type: 'success' | 'error' | 'warning' | 'info', message: string, duration = 5000) {
      const id = 'toast-' + Date.now();
      const toast = this.createToastElement(id, type, message);
      
      // Add with initial opacity 0
      toast.classList.add('opacity-0');
      this.container.appendChild(toast);
      
      // Force reflow before transition
      void toast.offsetWidth;
      
      // Fade in
      toast.classList.remove('opacity-0');
      
      // Auto-remove after duration
      if (duration > 0) {
        const timeout = window.setTimeout(() => this.remove(id), duration);
        this.timeouts.set(id, timeout);
      }
      
      return id;
    }

    remove(id: string) {
      const toast = document.getElementById(id);
      if (toast) {
        toast.classList.add('opacity-0');
        setTimeout(() => toast.remove(), 300);
        
        if (this.timeouts.has(id)) {
          window.clearTimeout(this.timeouts.get(id));
          this.timeouts.delete(id);
        }
      }
    }

    createToastElement(id: string, type: string, message: string) {
      const toast = document.createElement('div');
      toast.id = id;
      toast.className = 'rounded-md p-4 mb-4 flex items-start shadow-lg transition-opacity duration-300 w-full';
      toast.setAttribute('role', 'alert');
      
      // Set styles based on type
      switch (type) {
        case 'success':
          toast.classList.add('bg-green-50', 'dark:bg-green-900/30', 'border-l-4', 'border-green-500');
          break;
        case 'error':
          toast.classList.add('bg-red-50', 'dark:bg-red-900/30', 'border-l-4', 'border-red-500');
          break;
        case 'warning':
          toast.classList.add('bg-yellow-50', 'dark:bg-yellow-900/30', 'border-l-4', 'border-yellow-500');
          break;
        case 'info':
        default:
          toast.classList.add('bg-blue-50', 'dark:bg-blue-900/30', 'border-l-4', 'border-blue-500');
          break;
      }

      // Create icon element
      const icon = document.createElement('div');
      icon.className = 'flex-shrink-0 mr-3';
      
      // Set icon based on type
      switch (type) {
        case 'success':
          icon.innerHTML = '<div class="i-carbon-checkmark-filled h-5 w-5 text-green-500"></div>';
          break;
        case 'error':
          icon.innerHTML = '<div class="i-carbon-warning-filled h-5 w-5 text-red-500"></div>';
          break;
        case 'warning':
          icon.innerHTML = '<div class="i-carbon-warning-alt-filled h-5 w-5 text-yellow-500"></div>';
          break;
        case 'info':
        default:
          icon.innerHTML = '<div class="i-carbon-information-filled h-5 w-5 text-blue-500"></div>';
          break;
      }

      // Message element
      const messageElement = document.createElement('div');
      messageElement.className = 'flex-1 pt-0.5';
      
      const messageText = document.createElement('p');
      messageText.className = 'text-sm font-medium text-gray-900 dark:text-gray-100';
      messageText.textContent = message;
      
      messageElement.appendChild(messageText);
      
      // Close button
      const closeBtn = document.createElement('button');
      closeBtn.className = 'ml-4 flex-shrink-0 inline-flex text-gray-400 focus:outline-none focus:text-gray-500 dark:focus:text-gray-300';
      closeBtn.setAttribute('aria-label', 'Close notification');
      closeBtn.innerHTML = '<div class="i-carbon-close h-4 w-4"></div>';
      closeBtn.addEventListener('click', () => this.remove(id));
      
      // Assemble toast
      toast.appendChild(icon);
      toast.appendChild(messageElement);
      toast.appendChild(closeBtn);
      
      return toast;
    }
  }

  // Initialize the toast system when the DOM is ready
  document.addEventListener('DOMContentLoaded', () => {
    window.toastSystem = new ToastSystem();
  });

  // Helper function to show toasts from anywhere
  window.showToast = function(type, message, duration) {
    if (window.toastSystem) {
      return window.toastSystem.show(type, message, duration);
    } else {
      console.error('Toast system not initialized');
      return null;
    }
  };
</script>