// src/types/document.d.ts
/**
 * This module defines TypeScript interfaces for document management,
 * including metadata, storage, permissions, and processing states
 * specific to financial, legal, and accounting documents in a real estate context.
 */

// ----------------
// Document Types and Categories
// ----------------

/**
 * Comprehensive list of supported document types within the system.
 */
export type DocumentType =
  // Financial documents
  | "invoice_payable"       // Vendor invoices received
  | "invoice_receivable"    // Invoices issued to tenants/clients
  | "receipt"               // Proof of payment
  | "bank_statement"
  | "credit_card_statement"
  | "loan_agreement"
  | "loan_statement"
  | "purchase_order"
  | "payment_confirmation"
  | "financial_report"      // e.g., P&L, Balance Sheet generated by the system or uploaded

  // Tax documents
  | "tax_return_personal"   // e.g., 1040
  | "tax_return_business"   // e.g., 1065, 1120S
  | "w2"
  | "w9"
  | "1099_misc"
  | "1099_nec"
  | "1099_int"
  | "1099_div"
  | "k1_partnership"
  | "k1_scorp"
  | "property_tax_bill"
  | "1098_mortgage_interest"

  // Legal & Real Estate documents
  | "contract_general"
  | "lease_agreement_residential"
  | "lease_agreement_commercial"
  | "lease_addendum"
  | "eviction_notice"
  | "estoppel_certificate"
  | "purchase_agreement_real_estate"
  | "deed"
  | "title_insurance_policy"
  | "survey_plat"
  | "appraisal_report"
  | "inspection_report"
  | "environmental_report"
  | "incorporation_document" // LLC operating agreement, partnership agreement
  | "business_license"
  | "insurance_policy_property"
  | "insurance_policy_liability"

  // Entity & Operational documents
  | "chart_of_accounts_document" // If CoA is managed as a document
  | "audit_report_internal"
  | "audit_report_external"
  | "meeting_minutes"
  | "policy_procedure"
  | "internal_memo"
  | "correspondence_letter"
  | "correspondence_email_archive" // For important email records
  | "general_attachment" // Generic fallback
  | "user_manual_guide"
  | "custom_user_defined"; // Allows users to define their own types

/**
 * Broad categories for organizing documents.
 */
export type DocumentCategory =
  | "financial_operations"
  | "banking_statements"
  | "loan_documents"
  | "taxation"
  | "legal_agreements"
  | "real_estate_property"
  | "real_estate_lease"
  | "corporate_entity"
  | "insurance"
  | "compliance_audit"
  | "internal_communications"
  | "vendor_relations"
  | "tenant_relations"
  | "human_resources" // If applicable for property management companies
  | "other_miscellaneous";

/**
 * Supported storage providers for documents.
 */
export type StorageProvider =
  | "local_development" // For local dev simulation
  | "cloudflare_r2"   // Primary cloud storage for the app
  | "aws_s3"            // Potential future integration or import source
  | "google_cloud_storage"
  | "azure_blob_storage"
  | "other_external";     // For linking to documents stored elsewhere

/**
 * Common document file formats/MIME types (subset for simplicity).
 * The `mimeType` field in DocumentMetadata will hold the precise MIME type.
 */
export type DocumentFormatCategory =
  | "pdf"
  | "word_document" // .doc, .docx
  | "excel_spreadsheet" // .xls, .xlsx
  | "csv_text"
  | "plain_text"
  | "image_png"
  | "image_jpeg"
  | "image_tiff" // Common for scanned docs
  | "html_content"
  | "xml_data"
  | "json_data"
  | "zip_archive"
  | "other_binary";

/**
 * Status of document processing (e.g., OCR, data extraction).
 */
export type DocumentProcessingStatus =
  | "upload_pending"        // File selected but not yet uploaded
  | "uploading"             // File transfer in progress
  | "upload_complete"       // Stored, awaiting processing
  | "queued_for_processing" // In a queue for OCR/analysis
  | "processing_ocr"        // OCR in progress
  | "processing_extraction" // Data extraction in progress
  | "processing_linking"    // Attempting to link to transactions/entities
  | "processed_needs_review"// Automated processing done, human review suggested
  | "processed_auto_approved"// Automated processing done, high confidence
  | "manually_reviewed_approved"
  | "manually_reviewed_rejected"
  | "processing_failed"
  | "archived_system"       // System archived (e.g., due to retention policy)
  | "archived_user";        // User archived

// ----------------
// Core Document Interfaces
// ----------------

/**
 * Metadata associated with a document.
 */
export interface DocumentMetadata {
  /** Unique identifier (UUID) for this document record. */
  readonly id: string;
  /** User-defined name or title for the document. */
  name: string;
  type: DocumentType;
  category: DocumentCategory;
  /** Detected or specified file format category (e.g., 'pdf', 'image_jpeg'). */
  formatCategory: DocumentFormatCategory;
  /** Actual MIME type of the uploaded file (e.g., 'application/pdf', 'image/jpeg'). */
  mimeType: string;
  /** Size of the document file in bytes. */
  sizeBytes: number;
  /** Original filename as uploaded by the user. */
  originalFilename: string;
  /** Unix timestamp (seconds) when the document record was created (upload time). */
  readonly createdAt: number;
  /** Unix timestamp (seconds) when the document metadata or content was last modified. */
  updatedAt: number;
  /** ID of the user who uploaded or owns this document. */
  readonly uploadedByUserId: string; // Changed from uploadedBy for clarity
  isFavorite?: boolean;
  tags?: string[];
  status: DocumentProcessingStatus;
  /** ID of the primary entity this document is associated with. */
  entityId?: string | null;
  /** ID of the property this document is associated with (if applicable). */
  propertyId?: string | null;
  /** ID of the lease this document is associated with (if applicable). */
  leaseId?: string | null;
  /** ID of the folder this document resides in, if using a folder structure. */
  folderId?: string | null;
  /** Optional user-provided description or notes about the document. */
  description?: string | null;
  /** Custom key-value properties for additional metadata. */
  customProperties?: Record<string, any>;
  /** Date relevant to the document's content (e.g., invoice date, statement date). Unix timestamp (seconds). */
  documentDate?: number | null;
}

/**
 * Information about where and how the document file is stored.
 */
export interface DocumentStorageInfo { // Renamed from DocumentStorage for clarity
  /** The storage provider used (e.g., 'cloudflare_r2'). */
  provider: StorageProvider;
  /** The unique path or key identifying the object in the storage provider. */
  storagePathOrKey: string; // Renamed from location for clarity
  /** Storage-provider-specific identifier for the object (e.g., ETag for S3/R2). */
  storageObjectId?: string | null; // Renamed from storageId
  /** Indicates if the document is encrypted at rest by the storage provider. */
  isEncryptedAtRest: boolean;
  encryptionDetails?: {
    algorithm: string; // e.g., 'AES-256'
    // iv?: string; // Only if client-side encryption was used and IV needs to be stored
    // keyManagement?: 'provider_managed' | 'customer_managed';
  } | null;
  /** Checksum of the file for integrity verification. */
  checksum?: string | null;
  checksumAlgorithm?: 'md5' | 'sha1' | 'sha256' | null;
  /** Current version identifier of the document in storage (if versioning is enabled). */
  versionId?: string | null;
  totalVersions?: number; // If storage supports versioning
  region?: string | null; // e.g., 'auto', 'wnam', specific Cloudflare R2 region
}

/**
 * Access control and sharing information for a document.
 */
export interface DocumentAccessControl { // Renamed from DocumentAccess
  /** ID of the user who is considered the primary owner of this document record. */
  ownerUserId: string; // Renamed from ownerId
  isPublicLinkActive: boolean; // Renamed from isPublic
  publicLinkUrl?: string | null;
  publicLinkPasswordProtected?: boolean;
  /** Unix timestamp (seconds) when public link expires. */
  publicLinkExpiresAt?: number | null;

  /** Permissions granted to specific users. Key is User ID. */
  userPermissions?: Record<string, DocumentPermissionLevel>; // Renamed from DocumentPermission
  /** Permissions granted to user roles/groups. Key is Role/Group ID. */
  groupPermissions?: Record<string, DocumentPermissionLevel>;
  // rolePermissions removed as groupPermissions can cover roles.

  /** Unix timestamp (seconds) when access settings expire for the document overall. */
  accessExpiresAt?: number | null;
  /** Log of significant access events (views, downloads, shares). */
  accessAuditLog?: Array<{
    userId: string;
    action: 'viewed' | 'downloaded' | 'edited_metadata' | 'permissions_changed' | 'shared' | 'deleted_version';
    /** Unix timestamp (seconds). */
    timestamp: number;
    ipAddress?: string | null;
  }>;
}

/**
 * Defines the level of permission a user or group has on a document.
 */
export type DocumentPermissionLevel = // Renamed from DocumentPermission
  | 'view_only'        // Can only view the document content/metadata
  | 'can_download'     // Can view and download
  | 'can_comment'      // Can view, download, and add comments
  | 'can_edit_metadata'// Can edit metadata like name, tags, description
  | 'can_annotate'     // If annotation features exist
  | 'can_manage_versions'
  | 'can_manage_access'// Can change permissions for others (but not delete owner)
  | 'owner_full_control'; // Full control, including deletion

/**
 * The complete document object, combining all aspects.
 */
export interface Document {
  metadata: DocumentMetadata;
  storageInfo: DocumentStorageInfo;
  accessControl: DocumentAccessControl;
  /** OCR data if the document has been processed by OCR. */
  ocrData?: DocumentOcrResult | null; // Renamed from ocr and DocumentOCR
  /** IDs of transactions linked to this document. */
  linkedTransactionIds?: string[];
  /** IDs of accounts linked to this document. */
  linkedAccountIds?: string[];
  /** IDs of other entities (properties, tenants, vendors) linked. */
  linkedOtherEntityIds?: string[];
  /** ID of a parent document if this is a version, attachment, or derivative. */
  parentDocumentId?: string | null;
  /** IDs of child documents (e.g., pages of a TIFF, attachments to an email). */
  childDocumentIds?: string[];
  /** Custom data specific to the document's `type` (e.g., extracted invoice fields). */
  extractedData?: InvoiceDocumentData | ReceiptDocumentData | Record<string, any> | null; // Renamed from customData
  reviewHistory?: Array<{
    userId: string;
    status: 'approved' | 'rejected' | 'commented';
    /** Unix timestamp (seconds). */
    timestamp: number;
    notes?: string;
  }>;
}

// ----------------
// OCR and Document Processing Types
// ----------------

/**
 * Results from OCR (Optical Character Recognition) processing of a document.
 */
export interface DocumentOcrResult { // Renamed from DocumentOCR
  /** Full extracted text content from the document. */
  fullTextContent: string; // Renamed from fullText
  /** Unix timestamp (seconds) when OCR processing was completed. */
  ocrProcessedAt: number; // Renamed from processedAt
  /** Overall confidence score for the OCR quality (0.0 to 1.0). */
  ocrConfidenceScore: number; // Renamed from confidence
  /** Structured fields extracted by OCR and/or data extraction models. Key is field name. */
  extractedFields?: Record<string, ExtractedDocumentField> | null; // Renamed from fields and DocumentField
  pageCount?: number;
  /** Per-page OCR results. */
  pages?: Array<{
    pageNumber: number;
    text: string;
    confidence: number; // Confidence for this specific page
    tables?: ExtractedDocumentTable[]; // Tables found on this page
    // boundingBox of page content if available
  }> | null;
  detectedLanguage?: string | null;
  imageQualityAssessment?: { // Renamed from quality
    resolutionDpi?: number;
    contrast?: number; // Scale e.g. 0-1
    brightness?: number; // Scale e.g. 0-1
    skewAngleDegrees?: number;
  } | null;
}

/**
 * Represents a single field extracted from a document via OCR or data extraction.
 */
export interface ExtractedDocumentField { // Renamed from DocumentField
  name: string; // Standardized or original field name
  rawValue: string; // The text as extracted by OCR
  /** Normalized or interpreted value (e.g., Date object for a date string, number for currency). */
  normalizedValue?: any;
  /** Confidence score for this specific field extraction (0.0 to 1.0). */
  confidence: number;
  /** Semantic type of the field (e.g., 'date', 'currency', 'address', 'invoice_number'). */
  fieldType?: string | null;
  /** Bounding box coordinates of the field on the document page. */
  boundingBox?: {
    pageNumber: number; // Page where field is located
    xMin: number; yMin: number; // Top-left
    xMax: number; yMax: number; // Bottom-right
    // Coordinates can be pixels or relative (0-1) depending on OCR system
  } | null;
  validationStatus?: 'valid' | 'invalid' | 'needs_manual_check';
  validationRulesApplied?: string[];
}

/**
 * Represents a table structure extracted from a document.
 */
export interface ExtractedDocumentTable { // Renamed from DocumentTable
  /** Unique identifier for this table within the document. */
  id: string;
  pageNumber: number;
  headers?: string[] | null; // Optional if headers couldn't be identified
  /** Array of rows, where each row is an array of cell strings. */
  rows: Array<Array<string | null>>; // Cells can be null if empty
  /** Overall confidence score for the table extraction (0.0 to 1.0). */
  confidence: number;
  title?: string | null; // Detected title of the table
  boundingBox?: { /* ... as in ExtractedDocumentField ... */ } | null;
}

// ----------------
// Financial Document Specific Extracted Data Structures
// ----------------

/**
 * Specific data fields commonly extracted from an Invoice document.
 * This would populate the `extractedData` field in the `Document` interface if `type` is an invoice.
 */
export interface InvoiceDocumentData {
  invoiceNumber?: string | null;
  /** Invoice date. Unix timestamp (seconds). */
  invoiceDate?: number | null;
  /** Due date. Unix timestamp (seconds). */
  dueDate?: number | null;
  vendorInfo?: { // Renamed from vendor
    name?: string | null;
    id?: string | null; // Link to vendor entity
    address?: string | null;
    taxId?: string | null;
  } | null;
  customerInfo?: { // Renamed from customer
    name?: string | null;
    id?: string | null; // Link to customer/tenant entity
    address?: string | null;
  } | null;
  lineItems?: Array<{
    description: string;
    quantity?: number | null;
    unitPrice?: number | null;
    amount: number; // Total for this line item
    accountCode?: string | null; // Suggested CoA code
    taxRate?: number | null; // As decimal, e.g., 0.05
  }> | null;
  subtotalAmount?: number | null; // Renamed from subtotal
  taxAmount?: number | null;
  totalAmount: number; // Renamed from total
  currencyCode?: string | null; // e.g., "USD"
  paymentTerms?: string | null;
  paymentStatus?: "unpaid" | "partially_paid" | "paid" | "overdue";
  amountPaid?: number | null;
  /** Date of payment. Unix timestamp (seconds). */
  paymentDate?: number | null;
  paymentMethod?: string | null;
  paymentReference?: string | null;
  purchaseOrderNumber?: string | null;
  notes?: string | null;
}

/**
 * Specific data fields commonly extracted from a Receipt document.
 */
export interface ReceiptDocumentData {
  receiptNumber?: string | null;
  /** Receipt date. Unix timestamp (seconds). */
  receiptDate: number;
  vendorInfo?: { // Renamed from vendor
    name?: string | null;
    id?: string | null; // Link to vendor entity
    address?: string | null;
    phone?: string | null;
  } | null;
  lineItems?: Array<{
    description: string;
    quantity?: number | null;
    unitPrice?: number | null;
    amount: number;
    category?: string | null; // Suggested expense category
  }> | null;
  subtotalAmount?: number | null;
  taxAmount?: number | null;
  tipAmount?: number | null;
  totalAmount: number;
  currencyCode?: string | null;
  paymentMethod?: string | null;
  cardLast4Digits?: string | null; // Renamed from cardLast4
  isReimbursable?: boolean;
  expenseCategory?: string | null; // Overall expense category
  businessPurpose?: string | null;
  attendees?: string[] | null; // For meal/entertainment receipts
}

// ----------------
// Document Operations Payloads
// ----------------

/**
 * Parameters for initiating a document upload.
 * The actual file is typically handled via FormData in the request.
 */
export interface DocumentUploadRequest { // Renamed from DocumentUploadParams
  /** File metadata from the client (name, type, size). The actual File object is sent separately. */
  fileMetadata: {
    filename: string;
    mimeType: string;
    sizeBytes: number;
  };
  type: DocumentType;
  name?: string | null; // Optional: User can override filename as document name
  category?: DocumentCategory | null;
  entityId?: string | null;
  propertyId?: string | null;
  leaseId?: string | null;
  tags?: string[] | null;
  processOcr?: boolean; // Flag to trigger OCR processing
  /** Unix timestamp (seconds). */
  documentDate?: number | null; // e.g., invoice date, statement date
  customProperties?: Record<string, any> | null;
  folderId?: string | null;
}

/**
 * Parameters for searching or filtering documents.
 */
export interface DocumentSearchFilters { // Renamed from DocumentSearchParams
  /** Full-text search query against metadata and OCR content. */
  textQuery?: string | null;
  type?: DocumentType | DocumentType[] | null;
  category?: DocumentCategory | DocumentCategory[] | null;
  entityId?: string | null;
  propertyId?: string | null;
  leaseId?: string | null;
  tags?: string[] | null; // Match any of these tags
  /** Date range filter based on `documentDate`. */
  documentDateRange?: {
    /** Unix timestamp (seconds). */
    from?: number;
    /** Unix timestamp (seconds). */
    to?: number;
  } | null;
  /** Date range filter based on `createdAt` (upload date). */
  uploadDateRange?: {
    /** Unix timestamp (seconds). */
    from?: number;
    /** Unix timestamp (seconds). */
    to?: number;
  } | null;
  uploadedByUserId?: string | null;
  status?: DocumentProcessingStatus | DocumentProcessingStatus[] | null;
  folderId?: string | null;
  isFavorite?: boolean;
  minSizeBytes?: number;
  maxSizeBytes?: number;
  sort?: {
    field: "name" | "createdAt" | "updatedAt" | "sizeBytes" | "documentDate";
    direction: "asc" | "desc";
  } | null;
  // Pagination would typically be handled by API wrapper, not in filters directly
}

/**
 * Represents a folder in the document management system.
 */
export interface DocumentFolder {
  /** Unique identifier (UUID) for the folder. */
  readonly id: string;
  name: string;
  parentId?: string | null; // For nested folders
  entityId?: string | null; // If folder is specific to an entity
  /** Unix timestamp (seconds) when the folder was created. */
  readonly createdAt: number;
  /** Unix timestamp (seconds) when the folder was last updated. */
  updatedAt: number;
  readonly createdByUserId: string;
  // Denormalized counts for UI, updated via triggers or batch jobs
  documentCount?: number;
  subfolderCount?: number;
  totalSizeStoredBytes?: number;
}

/**
 * Result of a batch operation on documents (e.g., bulk delete, tag, move).
 */
export interface DocumentBatchOperationResult { // Renamed from DocumentBatchResult
  totalRequested: number;
  successCount: number;
  errorCount: number;
  /** Detailed results or errors, keyed by document ID. */
  resultsByDocId?: Record<
    string,
    {
      success: boolean;
      message?: string; // e.g., "Deleted successfully" or error message
      errorCode?: string;
    }
  > | null;
}