---
// src/pages/auth/forgot-password.astro
import AuthLayout from "@/components/layout/AuthLayout.astro";
import Button from "@/components/ui/Button.astro";
import Alert from "@/components/ui/Alert.astro";
import { resetPasswordRequestSchema } from "@/lib/validation/schemas/auth";
import { z } from "zod";
import { apiRequest } from "@/utils/api";

const csrfToken = Astro.locals.csrfToken || "";

let formErrors: z.ZodIssue[] = [];
let errorMessage: string | null = null;
let successMessage: string | null = null;
let emailValue: string = Astro.url.searchParams.get("email") || "";

// Handle form POST
if (Astro.request.method === "POST") {
  try {
    const formData = await Astro.request.formData();
    const email = formData.get("email")?.toString().trim().toLowerCase() || "";
    emailValue = email;

    const submittedToken = formData.get("_csrf")?.toString();
    if (!submittedToken || submittedToken !== csrfToken) {
      errorMessage = "Security validation failed. Please try again.";
      Astro.response.status = 403;
    } else {
      const validation = resetPasswordRequestSchema.safeParse({ email });
      if (!validation.success) {
        formErrors = validation.error.errors;
        errorMessage = validation.error.errors[0]?.message || "Please enter a valid email address.";
      } else {
        // POST to your custom API endpoint
        const result = await apiRequest<{ message?: string }>('/api/auth-tools/request-password-reset', {
            method: 'POST',
            body: { email },
        });

        if (result.success) {
          successMessage = result.data?.message || "If an account with this email exists, password reset instructions have been sent. Please check your inbox (and spam folder).";
          emailValue = "";
        } else {
          errorMessage = result.error || "There was a problem processing your request.";
          // If API returns Zod-like errors in result.errors:
          // formErrors = result.errors as z.ZodIssue[] || [];
        }
      }
    }
  } catch (error) {
    console.error("Forgot password page POST error:", error);
    errorMessage = "An unexpected error occurred. Please try again.";
  }
}

const getFieldError = (field: string) => {
  return formErrors.find(err => err.path.includes(field))?.message;
};
---

<AuthLayout title="Forgot Password">
  <div class="w-full max-w-md mx-auto">
    <div class="text-center mb-6">
      <h1 class="text-2xl font-bold text-neutral-900 dark:text-white">Reset Your Password</h1>
      <p class="mt-2 text-sm text-neutral-600 dark:text-gray-400">
        Enter your email address and we'll send you instructions to reset your password.
      </p>
    </div>

    {successMessage ? (
      <div class="bg-white dark:bg-neutral-800 shadow-md rounded-lg p-6 border border-neutral-200 dark:border-neutral-700">
        <Alert type="success" dismissible={false}>
          <span aria-hidden="true" class="mr-2">✅</span>
          {successMessage}
        </Alert>
        <div class="mt-6 text-center">
          <a 
            href="/auth/login" 
            class="inline-flex items-center justify-center px-4 py-2 text-sm font-medium text-primary-600 hover:text-primary-700 dark:text-primary-400 dark:hover:text-primary-300"
          >
            <span aria-hidden="true" class="mr-2 text-base">←</span>
            Return to login
          </a>
        </div>
      </div>
    ) : (
      <div class="bg-white dark:bg-neutral-800 shadow-md rounded-lg p-6 border border-neutral-200 dark:border-neutral-700">
        {errorMessage && !formErrors.length && (
          <div class="mb-6">
            <Alert type="error" dismissible={true}>
              <span aria-hidden="true" class="mr-2">❌</span>
              {errorMessage}
            </Alert>
          </div>
        )}

        <form method="POST" class="space-y-6" novalidate>
          <input type="hidden" name="_csrf" value={csrfToken} />
          <div>
            <label for="email" class="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-1">
              Email Address <span class="text-danger">*</span>
            </label>
            <input
              id="email"
              name="email"
              type="email"
              required
              autocomplete="email"
              placeholder="your.email@example.com"
              class={`input w-full ${getFieldError('email') ? 'input-error' : ''}`}
              value={emailValue}
              aria-invalid={getFieldError('email') ? "true" : undefined}
              aria-describedby={getFieldError('email') ? "email-error-fp" : undefined}
            />
            {getFieldError('email') && (
              <p id="email-error-fp" class="mt-1 text-sm text-danger dark:text-danger-light">
                <span aria-hidden="true" class="mr-1">❌</span>
                {getFieldError('email')}
              </p>
            )}
          </div>
          <div>
            <Button type="submit" variant="primary" size="lg" fullWidth>
              Send Reset Instructions
            </Button>
          </div>
        </form>
        
        <div class="mt-6 text-center">
          <p class="text-sm text-neutral-600 dark:text-neutral-400">
            Remember your password?{" "}
            <a href="/auth/login" class="font-medium text-primary-600 hover:text-primary-500 dark:text-primary-400 dark:hover:text-primary-300 hover:underline">
              Sign in
            </a>
          </p>
        </div>
      </div>
    )}
  </div>
</AuthLayout>
