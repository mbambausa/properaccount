---
// src/pages/auth/forgot-password.astro
import AuthLayout from "@/components/layout/AuthLayout.astro";
import Button from "@/components/ui/Button.astro";
import Alert from "@/components/ui/Alert.astro";
import { requestPasswordReset } from "@/lib/auth/auth";
import { resetPasswordRequestSchema } from "@/lib/validation/schemas/auth";
import { z } from "zod";

// Get the CSRF token from locals (set by middleware)
const csrfToken = Astro.locals.csrfToken || "";
const env = Astro.locals.runtime?.env;

// Initialize state
let formErrors: z.ZodIssue[] = [];
let errorMessage: string | null = null;
let successMessage: string | null = null;
let emailValue: string = Astro.url.searchParams.get("email") || "";

// Handle form submission (POST)
if (Astro.request.method === "POST") {
  try {
    const formData = await Astro.request.formData();
    const email = formData.get("email")?.toString().trim().toLowerCase() || "";
    emailValue = email; // Store for repopulating form if there's an error
    
    // Validate CSRF token
    const submittedToken = formData.get("_csrf")?.toString();
    if (!submittedToken || submittedToken !== csrfToken) {
      errorMessage = "Security validation failed. Please try again.";
      Astro.response.status = 403;
    } else {
      // Validate email using Zod schema
      const validation = resetPasswordRequestSchema.safeParse({ email });
      
      if (!validation.success) {
        formErrors = validation.error.errors;
        errorMessage = validation.error.errors[0]?.message || "Please enter a valid email address.";
      } else {
        // Make the request to the auth system
        if (env) {
          const result = await requestPasswordReset(env, { email });
          
          if (result.success) {
            // Always show success message even if email doesn't exist (prevent email enumeration)
            successMessage = "If an account with this email exists, we've sent password reset instructions. Please check your inbox (including spam folder).";
            emailValue = ""; // Clear email on success
          } else {
            errorMessage = result.error || "There was a problem processing your request. Please try again.";
            formErrors = result.errors || [];
          }
        } else {
          errorMessage = "System configuration error. Please try again later.";
        }
      }
    }
  } catch (error) {
    console.error("Forgot password error:", error);
    errorMessage = "An unexpected error occurred. Please try again.";
  }
}

// Get the error for a specific field
const getFieldError = (field: string) => {
  return formErrors.find(error => error.path.includes(field))?.message;
};
---

<AuthLayout title="Forgot Password">
  <div class="w-full max-w-md mx-auto">
    <div class="text-center mb-6">
      <h1 class="text-2xl font-bold text-gray-900 dark:text-white">Reset Your Password</h1>
      <p class="mt-2 text-sm text-gray-600 dark:text-gray-400">
        Enter your email address and we'll send you instructions to reset your password.
      </p>
    </div>

    {successMessage ? (
      <div class="bg-white dark:bg-neutral-800 shadow-md rounded-lg p-6 border border-neutral-200 dark:border-neutral-700">
        <Alert type="success" dismissible={false}>
          {successMessage}
        </Alert>
        
        <div class="mt-6 text-center">
          <a 
            href="/auth/login" 
            class="inline-flex items-center justify-center px-4 py-2 text-sm font-medium text-primary-600 hover:text-primary-700 dark:text-primary-400 dark:hover:text-primary-300"
          >
            <span class="i-carbon-arrow-left mr-2 h-4 w-4"></span>
            Return to login
          </a>
        </div>
      </div>
    ) : (
      <div class="bg-white dark:bg-neutral-800 shadow-md rounded-lg p-6 border border-neutral-200 dark:border-neutral-700">
        {errorMessage && (
          <div class="mb-6">
            <Alert type="error" dismissible={true}>
              {errorMessage}
            </Alert>
          </div>
        )}

        <form method="POST" class="space-y-6" novalidate>
          <input type="hidden" name="_csrf" value={csrfToken} />

          <div>
            <label 
              for="email" 
              class="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-1"
            >
              Email Address <span class="text-red-500">*</span>
            </label>
            <input
              id="email"
              name="email"
              type="email"
              required
              autocomplete="email"
              placeholder="your.email@example.com"
              class={`
                w-full px-4 py-2 border rounded-md shadow-sm placeholder:text-neutral-400 
                focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500
                ${getFieldError('email') ? 'border-red-500' : 'border-neutral-300 dark:border-neutral-600'}
                dark:bg-neutral-800 dark:text-white
              `}
              value={emailValue}
              aria-describedby={getFieldError('email') ? "email-error" : undefined}
            />
            {getFieldError('email') && (
              <p id="email-error" class="mt-1 text-sm text-red-600 dark:text-red-400">
                {getFieldError('email')}
              </p>
            )}
          </div>

          <div>
            <Button type="submit" variant="primary" size="lg" fullWidth>
              Send Reset Instructions
            </Button>
          </div>
        </form>
        
        <div class="mt-6 text-center">
          <p class="text-sm text-neutral-600 dark:text-neutral-400">
            Remember your password?{" "}
            <a 
              href="/auth/login" 
              class="font-medium text-primary-600 hover:text-primary-500 dark:text-primary-400 dark:hover:text-primary-300 hover:underline"
            >
              Sign in
            </a>
          </p>
        </div>
      </div>
    )}
  </div>
</AuthLayout>

<script>
  // Client-side validation
  document.addEventListener('DOMContentLoaded', () => {
    const form = document.querySelector('form');
    const emailInput = document.getElementById('email') as HTMLInputElement;
    
    form?.addEventListener('submit', (e) => {
      let isValid = true;
      
      // Reset previous error states
      const errorTextElement = document.getElementById('email-error');
      if (errorTextElement) {
        errorTextElement.textContent = '';
        errorTextElement.style.display = 'none';
      }
      
      emailInput.classList.remove('border-red-500');
      
      // Validate email field
      if (!emailInput.value.trim()) {
        e.preventDefault();
        isValid = false;
        emailInput.classList.add('border-red-500');
        
        // Display error if it exists or create one
        if (errorTextElement) {
          errorTextElement.textContent = 'Please enter your email address';
          errorTextElement.style.display = 'block';
        } else {
          const newError = document.createElement('p');
          newError.id = 'email-error';
          newError.className = 'mt-1 text-sm text-red-600 dark:text-red-400';
          newError.textContent = 'Please enter your email address';
          emailInput.parentNode?.appendChild(newError);
        }
      } else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(emailInput.value)) {
        e.preventDefault();
        isValid = false;
        emailInput.classList.add('border-red-500');
        
        if (errorTextElement) {
          errorTextElement.textContent = 'Please enter a valid email address';
          errorTextElement.style.display = 'block';
        } else {
          const newError = document.createElement('p');
          newError.id = 'email-error';
          newError.className = 'mt-1 text-sm text-red-600 dark:text-red-400';
          newError.textContent = 'Please enter a valid email address';
          emailInput.parentNode?.appendChild(newError);
        }
      }
      
      // Disable submit button during submission to prevent double submits
      if (isValid) {
        const submitButton = form.querySelector('button[type="submit"]');
        if (submitButton) {
          submitButton.setAttribute('disabled', 'true');
          submitButton.innerHTML = '<span class="inline-block animate-spin mr-2">‚ü≥</span> Sending...';
        }
      }
    });
  });
</script>