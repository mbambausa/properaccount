---
// src/pages/auth/reset-password.astro
import AuthLayout from "@/components/layout/AuthLayout.astro";
import Button from "@/components/ui/Button.astro";
import Alert from "@/components/ui/Alert.astro";
import { resetPasswordWithToken } from "@/lib/auth/auth";
import { resetPasswordConfirmSchema } from "@/lib/validation/schemas/auth";
import { z } from "zod";

// Get the CSRF token and environment bindings
const csrfToken = Astro.locals.csrfToken || "";
const env = Astro.locals.runtime?.env;

// Extract the token from URL parameters
const token = Astro.url.searchParams.get("token");

// Initialize state
let formErrors: z.ZodIssue[] = [];
let errorMessage: string | null = null;
let successMessage: string | null = null;
let isValidToken = false;
let passwordValue = "";
let confirmPasswordValue = "";

// Validate the token before showing the form
if (!token) {
  errorMessage = "Missing password reset token. Please request a new password reset link.";
} else if (!env) {
  errorMessage = "System configuration error. Please try again later.";
} else {
  // We'll trust the token is valid until proven otherwise on submission
  // This approach prevents information disclosure but provides a reasonable UX
  isValidToken = true;
}

// Handle form submission
if (Astro.request.method === "POST" && isValidToken) {
  try {
    const formData = await Astro.request.formData();
    
    // Validate CSRF token
    const submittedToken = formData.get("_csrf")?.toString();
    if (!submittedToken || submittedToken !== csrfToken) {
      errorMessage = "Security validation failed. Please try again.";
      Astro.response.status = 403;
      isValidToken = false; // Force re-request
    } else {
      // Get form data
      const resetToken = formData.get("token")?.toString() || token || "";
      const password = formData.get("password")?.toString() || "";
      const confirmPassword = formData.get("confirmPassword")?.toString() || "";
      
      // Save values for repopulation on error (though we won't actually show the values for passwords)
      passwordValue = password;
      confirmPasswordValue = confirmPassword;
      
      // Validate password requirements using Zod schema
      const validation = resetPasswordConfirmSchema.safeParse({
        token: resetToken,
        password,
        confirmPassword
      });
      
      if (!validation.success) {
        formErrors = validation.error.errors;
        const mainError = validation.error.errors[0];
        
        // Provide a friendly error message
        if (mainError?.path.includes('token')) {
          errorMessage = "Invalid or expired reset token. Please request a new password reset link.";
          isValidToken = false;
        } else if (mainError?.path.includes('confirmPassword')) {
          errorMessage = "Passwords do not match. Please try again.";
        } else {
          errorMessage = mainError?.message || "Please check your password and try again.";
        }
      } else if (env) {
        // Submit to auth system
        const result = await resetPasswordWithToken(env, validation.data);
        
        if (result.success) {
          successMessage = "Your password has been reset successfully. You can now sign in with your new password.";
          // Reset form values
          passwordValue = "";
          confirmPasswordValue = "";
        } else {
          // Handle different error cases
          if (result.error?.includes("expired")) {
            errorMessage = "Your password reset link has expired. Please request a new one.";
            isValidToken = false;
          } else if (result.error?.includes("token")) {
            errorMessage = "Invalid reset token. Please request a new password reset link.";
            isValidToken = false;
          } else {
            errorMessage = result.error || "There was a problem resetting your password. Please try again.";
          }
          formErrors = result.errors || [];
        }
      }
    }
  } catch (error) {
    console.error("Reset password error:", error);
    errorMessage = "An unexpected error occurred. Please try again.";
  }
}

// Helper to get error for a specific field
const getFieldError = (field: string) => {
  return formErrors.find(error => error.path.includes(field))?.message;
};
---

<AuthLayout title="Reset Password">
  <div class="w-full max-w-md mx-auto">
    <div class="text-center mb-6">
      <h1 class="text-2xl font-bold text-gray-900 dark:text-white">Reset Your Password</h1>
      <p class="mt-2 text-sm text-gray-600 dark:text-gray-400">
        {isValidToken ? 
          "Please enter and confirm your new password below." : 
          "Use the form below to set a new password for your account."}
      </p>
    </div>

    {successMessage ? (
      <div class="bg-white dark:bg-neutral-800 shadow-md rounded-lg p-6 border border-neutral-200 dark:border-neutral-700">
        <Alert type="success" dismissible={false}>
          {successMessage}
        </Alert>
        
        <div class="mt-6">
          <Button href="/auth/login" variant="primary" size="lg" fullWidth>
            Go to Sign In
          </Button>
        </div>
      </div>
    ) : (
      <div class="bg-white dark:bg-neutral-800 shadow-md rounded-lg p-6 border border-neutral-200 dark:border-neutral-700">
        {errorMessage && (
          <div class="mb-6">
            <Alert type="error" dismissible={true}>
              {errorMessage}
            </Alert>
          </div>
        )}

        {isValidToken ? (
          <form method="POST" class="space-y-6" novalidate id="reset-password-form">
            <input type="hidden" name="_csrf" value={csrfToken} />
            <input type="hidden" name="token" value={token} />

            <div>
              <label 
                for="password" 
                class="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-1"
              >
                New Password <span class="text-red-500">*</span>
              </label>
              <input
                id="password"
                name="password"
                type="password"
                required
                minlength="8"
                autocomplete="new-password"
                class={`
                  w-full px-4 py-2 border rounded-md shadow-sm placeholder:text-neutral-400 
                  focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500
                  ${getFieldError('password') ? 'border-red-500' : 'border-neutral-300 dark:border-neutral-600'}
                  dark:bg-neutral-800 dark:text-white
                `}
                aria-describedby="password-requirements"
              />
              {getFieldError('password') ? (
                <p id="password-error" class="mt-1 text-sm text-red-600 dark:text-red-400">
                  {getFieldError('password')}
                </p>
              ) : (
                <p id="password-requirements" class="mt-1 text-xs text-neutral-500 dark:text-neutral-400">
                  Password must be at least 8 characters and include uppercase, lowercase, and a number.
                </p>
              )}
            </div>

            <div>
              <label 
                for="confirmPassword" 
                class="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-1"
              >
                Confirm Password <span class="text-red-500">*</span>
              </label>
              <input
                id="confirmPassword"
                name="confirmPassword"
                type="password"
                required
                minlength="8"
                autocomplete="new-password"
                class={`
                  w-full px-4 py-2 border rounded-md shadow-sm placeholder:text-neutral-400 
                  focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500
                  ${getFieldError('confirmPassword') ? 'border-red-500' : 'border-neutral-300 dark:border-neutral-600'}
                  dark:bg-neutral-800 dark:text-white
                `}
              />
              {getFieldError('confirmPassword') && (
                <p id="confirm-password-error" class="mt-1 text-sm text-red-600 dark:text-red-400">
                  {getFieldError('confirmPassword')}
                </p>
              )}
            </div>

            <div>
              <Button type="submit" variant="primary" size="lg" fullWidth>
                Reset Password
              </Button>
            </div>
          </form>
        ) : (
          <div class="text-center py-4">
            <p class="mb-6">Your password reset link is invalid or has expired.</p>
            <Button href="/auth/forgot-password" variant="primary" size="lg" fullWidth>
              Request New Reset Link
            </Button>
          </div>
        )}
        
        <div class="mt-6 text-center">
          <p class="text-sm text-neutral-600 dark:text-neutral-400">
            Remember your password?{" "}
            <a 
              href="/auth/login" 
              class="font-medium text-primary-600 hover:text-primary-500 dark:text-primary-400 dark:hover:text-primary-300 hover:underline"
            >
              Sign in
            </a>
          </p>
        </div>
      </div>
    )}
  </div>
</AuthLayout>

<script>
  // Client-side validation for password reset form
  document.addEventListener('DOMContentLoaded', () => {
    const form = document.getElementById('reset-password-form') as HTMLFormElement;
    if (!form) return;
    
    const passwordInput = document.getElementById('password') as HTMLInputElement;
    const confirmPasswordInput = document.getElementById('confirmPassword') as HTMLInputElement;
    
    form.addEventListener('submit', (e) => {
      let isValid = true;
      
      // Reset previous error states
      passwordInput.classList.remove('border-red-500');
      confirmPasswordInput.classList.remove('border-red-500');
      
      const passwordErrorElement = document.getElementById('password-error');
      const confirmPasswordErrorElement = document.getElementById('confirm-password-error');
      
      if (passwordErrorElement) {
        passwordErrorElement.textContent = '';
        passwordErrorElement.style.display = 'none';
      }
      
      if (confirmPasswordErrorElement) {
        confirmPasswordErrorElement.textContent = '';
        confirmPasswordErrorElement.style.display = 'none';
      }
      
      // Validate password field
      if (!passwordInput.value) {
        e.preventDefault();
        isValid = false;
        passwordInput.classList.add('border-red-500');
        showError(passwordInput, 'password-error', 'Password is required');
      } else if (passwordInput.value.length < 8) {
        e.preventDefault();
        isValid = false;
        passwordInput.classList.add('border-red-500');
        showError(passwordInput, 'password-error', 'Password must be at least 8 characters');
      } else if (!/[A-Z]/.test(passwordInput.value)) {
        e.preventDefault();
        isValid = false;
        passwordInput.classList.add('border-red-500');
        showError(passwordInput, 'password-error', 'Password must include an uppercase letter');
      } else if (!/[a-z]/.test(passwordInput.value)) {
        e.preventDefault();
        isValid = false;
        passwordInput.classList.add('border-red-500');
        showError(passwordInput, 'password-error', 'Password must include a lowercase letter');
      } else if (!/[0-9]/.test(passwordInput.value)) {
        e.preventDefault();
        isValid = false;
        passwordInput.classList.add('border-red-500');
        showError(passwordInput, 'password-error', 'Password must include a number');
      }
      
      // Validate password confirmation
      if (!confirmPasswordInput.value) {
        e.preventDefault();
        isValid = false;
        confirmPasswordInput.classList.add('border-red-500');
        showError(confirmPasswordInput, 'confirm-password-error', 'Please confirm your password');
      } else if (passwordInput.value !== confirmPasswordInput.value) {
        e.preventDefault();
        isValid = false;
        confirmPasswordInput.classList.add('border-red-500');
        showError(confirmPasswordInput, 'confirm-password-error', 'Passwords do not match');
      }
      
      // Disable submit button during submission to prevent double submits
      if (isValid) {
        const submitButton = form.querySelector('button[type="submit"]');
        if (submitButton) {
          submitButton.setAttribute('disabled', 'true');
          submitButton.innerHTML = '<span class="inline-block animate-spin mr-2">⟳</span> Resetting Password...';
        }
      }
    });
    
    // Helper function to show error message
    function showError(input: HTMLElement, errorId: string, message: string) {
      let errorElement = document.getElementById(errorId);
      
      if (!errorElement) {
        errorElement = document.createElement('p');
        errorElement.id = errorId;
        errorElement.className = 'mt-1 text-sm text-red-600 dark:text-red-400';
        input.parentNode?.appendChild(errorElement);
      }
      
      errorElement.textContent = message;
      errorElement.style.display = 'block';
    }
    
    // Real-time password matching validation
    confirmPasswordInput.addEventListener('input', () => {
      const errorElement = document.getElementById('confirm-password-error');
      
      if (passwordInput.value && confirmPasswordInput.value) {
        if (passwordInput.value !== confirmPasswordInput.value) {
          confirmPasswordInput.classList.add('border-red-500');
          if (!errorElement) {
            showError(confirmPasswordInput, 'confirm-password-error', 'Passwords do not match');
          } else {
            errorElement.textContent = 'Passwords do not match';
            errorElement.style.display = 'block';
          }
        } else {
          confirmPasswordInput.classList.remove('border-red-500');
          if (errorElement) {
            errorElement.style.display = 'none';
          }
        }
      }
    });
  });
</script>