---
// src/pages/auth/login.astro
import AuthLayout from '@/components/layout/AuthLayout.astro';
import Button from '@/components/ui/Button.astro';
import Card from '@/components/ui/Card.astro';
import FormField from '@/components/ui/FormField.astro';
import ErrorBoundary from '@/components/ui/ErrorBoundary.astro';

let formError: string | null = Astro.url.searchParams.get('error');
let formData = {
  email: Astro.url.searchParams.get('email') || '',
  password: ''
};

const isRegistered = Astro.url.searchParams.get('registered') === 'true';
const from = Astro.url.searchParams.get('from');

if (Astro.request.method === 'POST') {
  try {
    const data = await Astro.request.formData();
    const email = data.get('email')?.toString();
    const password = data.get('password')?.toString();
    const rememberMe = data.get('remember-me') === 'on';

    formData = { email: email || '', password: '' };

    if (!email || !password) {
      formError = 'Email and password are required.';
    } else {
      const response = await fetch(`${Astro.url.origin}/api/auth/login`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ email, password, rememberMe }),
      });
      
      type LoginResponse = { 
        success: boolean; 
        error?: string; 
        user?: { id: string; name?: string; email: string };
      };
      let result: LoginResponse = { success: false, error: "Unexpected response from server." };
      const contentType = response.headers.get("content-type");

      if (contentType && contentType.includes("application/json")) {
        result = await response.json() as LoginResponse;
      } else if (!response.ok) {
        const responseText = await response.text().catch(() => response.statusText);
        result.error = `Server error: ${response.status} ${responseText}`;
      }
      
      if (response.ok && result.success) {
        return Astro.redirect(from || '/app/dashboard'); 
      } else {
        formError = result.error || 'Invalid email or password.';
      }
    }
  } catch (error: any) {
    console.error('Login page error:', error.message, error.stack);
    formError = 'An unexpected error occurred. Please try again.';
  }
}
---

<AuthLayout title="Sign In">
  <ErrorBoundary>
    <Card title="Sign in to your account" subtitle="Manage your real estate finances" class="w-full max-w-md mx-auto">
      <Fragment slot="body">
        {isRegistered && (
          <div class="bg-green-100 dark:bg-green-900/30 border-l-4 border-green-500 dark:border-green-600 p-4 mb-6 rounded-md text-sm text-green-700 dark:text-green-200" role="alert">
            <div class="flex items-center">
              <div class="i-carbon-checkmark-outline h-5 w-5 mr-2"></div>
              Registration successful! Please sign in.
            </div>
          </div>
        )}
        
        {formError && (
          <div class="bg-red-100 dark:bg-red-900/30 border-l-4 border-red-500 dark:border-red-600 p-4 mb-6 rounded-md text-sm text-red-700 dark:text-red-200" role="alert">
            <div class="flex items-center">
              <div class="i-carbon-warning-alt h-5 w-5 mr-2"></div>
              {formError}
            </div>
          </div>
        )}
        
        <form method="POST" class="space-y-6" novalidate>
          <FormField
            id="email"
            label="Email address"
            type="email"
            required={true}
            autocomplete="email"
            value={formData.email}
            error={formError && formError.toLowerCase().includes('email') ? formError : undefined}
          />
          
          <FormField
            id="password"
            label="Password"
            type="password"
            required={true}
            autocomplete="current-password"
            error={formError && formError.toLowerCase().includes('password') ? formError : undefined}
          />
          
          <div class="flex items-center justify-between text-sm">
            <div class="flex items-center">
              <input
                id="remember-me"
                name="remember-me"
                type="checkbox"
                class="h-4 w-4 rounded border-neutral-300 dark:border-neutral-600 text-primary-600 focus:ring-primary-500"
              />
              <label for="remember-me" class="ml-2 block text-neutral-700 dark:text-neutral-300">Remember me</label>
            </div>
            <div>
              <a href="/auth/forgot-password" class="font-medium text-primary-600 hover:text-primary-500 dark:text-primary-400 dark:hover:text-primary-300 hover:underline">Forgot password?</a>
            </div>
          </div>
          
          <Button type="submit" fullWidth={true} variant="primary" size="lg">
            Sign in
          </Button>
        </form>
        
        <div class="mt-8 text-center text-sm">
          <p class="text-neutral-600 dark:text-neutral-400">
            Don't have an account?
            <a href="/auth/register" class="font-medium text-primary-600 hover:text-primary-500 dark:text-primary-400 dark:hover:text-primary-300 hover:underline">Create one</a>
          </p>
        </div>
      </Fragment>
    </Card>
  </ErrorBoundary>
</AuthLayout>

<script>
  // Handle registration success toast
  document.addEventListener('DOMContentLoaded', () => {
    const isRegistered = new URLSearchParams(window.location.search).get('registered') === 'true';
    
    if (isRegistered && window.showToast) {
      window.showToast('success', 'Account created successfully! Welcome to ProperAccount.', 6000);
    }
    
    // Client-side form validation with toast feedback
    const form = document.querySelector('form');
    form?.addEventListener('submit', (e) => {
      const email = form.querySelector('#email') as HTMLInputElement;
      const password = form.querySelector('#password') as HTMLInputElement;
      
      let hasError = false;
      
      if (!email.value) {
        e.preventDefault();
        hasError = true;
        if (window.showToast) {
          window.showToast('error', 'Please enter your email address', 4000);
        }
        email.focus();
      } else if (!email.value.includes('@')) {
        e.preventDefault();
        hasError = true;
        if (window.showToast) {
          window.showToast('error', 'Please enter a valid email address', 4000);
        }
        email.focus();
      }
      
      if (!password.value) {
        e.preventDefault();
        hasError = true;
        if (!email.value.includes('@')) { // Don't show multiple errors at once
          if (window.showToast) {
            window.showToast('error', 'Please enter your password', 4000);
          }
          password.focus();
        }
      }
      
      // Save time by disabling submit button while processing
      if (!hasError) {
        const submitBtn = form.querySelector('button[type="submit"]');
        if (submitBtn) {
          submitBtn.setAttribute('disabled', 'true');
          submitBtn.textContent = 'Signing in...';
        }
      }
    });
  });
</script>