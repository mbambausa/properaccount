---
// src/pages/auth/register.astro
import AuthLayout from '@/components/layout/AuthLayout.astro';
import Card from '@/components/ui/Card.astro';
import Button from '@/components/ui/Button.astro';
import FormField from '@/components/ui/FormField.astro';
import ErrorBoundary from '@/components/ui/ErrorBoundary.astro';

let formError: string | null = null;
let formData = {
  name: '',
  email: '',
  password: '',
  confirmPassword: '',
  acceptTerms: false,
};

if (Astro.request.method === 'POST') {
  try {
    const data = await Astro.request.formData();
    const name = data.get('name')?.toString();
    const email = data.get('email')?.toString();
    const password = data.get('password')?.toString();
    const confirmPassword = data.get('confirmPassword')?.toString();
    const acceptTerms = data.get('acceptTerms') === 'on';

    // Persist form data for re-population on error (except passwords)
    formData = { name: name || '', email: email || '', password: '', confirmPassword: '', acceptTerms };

    // Basic client-side validation (Zod validation should happen in API endpoint)
    if (!name || !email || !password || !confirmPassword) {
      formError = 'All fields are required.';
    } else if (password.length < 8) {
      formError = 'Password must be at least 8 characters.';
    } else if (password !== confirmPassword) {
      formError = 'Passwords do not match.';
    } else if (!acceptTerms) {
      formError = 'You must accept the terms and conditions.';
    } else {
      const response = await fetch(`${Astro.url.origin}/api/auth/register`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ name, email, password, confirmPassword, acceptTerms }),
      });
      
      type RegisterResponse = { 
        success: boolean; 
        error?: string; 
        user?: { id: string; name: string; email: string };
        errors?: any;
      };
      const result = await response.json() as RegisterResponse;
      
      if (response.ok && result.success) {
        return Astro.redirect('/auth/login?registered=true');
      } else {
        // Prioritize Zod errors if available from API
        if (result.errors && Array.isArray(result.errors) && result.errors.length > 0) {
          formError = result.errors.map((err: any) => err.message).join(' ');
        } else {
          formError = result.error || 'Registration failed. Please try again.';
        }
      }
    }
  } catch (error: any) {
    console.error('Registration page error:', error.message);
    formError = 'An unexpected error occurred. Please try again.';
  }
}
---

<AuthLayout title="Create Account">
  <ErrorBoundary>
    <Card title="Create your account" subtitle="Start managing your real estate finances" class="w-full max-w-md mx-auto">
      <Fragment slot="body">
        {formError && (
          <div class="bg-red-100 dark:bg-red-900/30 border-l-4 border-red-500 dark:border-red-600 p-4 mb-6 rounded-md" role="alert">
            <div class="flex">
              <div class="flex-shrink-0">
                <div class="i-carbon-warning-alt h-5 w-5 text-red-500 dark:text-red-400"></div>
              </div>
              <div class="ml-3">
                <p class="text-sm text-red-700 dark:text-red-200">{formError}</p>
              </div>
            </div>
          </div>
        )}
        
        <form method="POST" class="space-y-6" novalidate id="register-form">
          <FormField
            id="name"
            label="Full Name"
            type="text"
            required={true}
            autocomplete="name"
            value={formData.name}
            error={formError && formError.toLowerCase().includes('name') ? formError : undefined}
          />
          
          <FormField
            id="email"
            label="Email Address"
            type="email"
            required={true}
            autocomplete="email"
            value={formData.email}
            error={formError && formError.toLowerCase().includes('email') ? formError : undefined}
          />
          
          <FormField
            id="password"
            label="Password"
            type="password"
            required={true}
            minlength={8}
            autocomplete="new-password"
            helpText="Must be at least 8 characters, include uppercase, lowercase, and a number."
            error={formError && formError.toLowerCase().includes('password') && !formError.toLowerCase().includes('confirm') ? formError : undefined}
          />

          <FormField
            id="confirmPassword"
            label="Confirm Password"
            type="password"
            required={true}
            minlength={8}
            autocomplete="new-password"
            error={formError && formError.toLowerCase().includes('match') ? formError : undefined}
          />

          <div class="flex items-start">
            <div class="flex items-center h-5">
              <input 
                id="acceptTerms" 
                name="acceptTerms" 
                type="checkbox" 
                required
                class="focus:ring-primary-500 h-4 w-4 text-primary-600 border-neutral-300 dark:border-neutral-600 rounded"
                checked={formData.acceptTerms}
                aria-describedby={formError && formError.toLowerCase().includes('terms') ? 'terms-error' : undefined}
              />
            </div>
            <div class="ml-3 text-sm">
              <label for="acceptTerms" class="font-medium text-neutral-700 dark:text-neutral-300">I agree to the</label>
              <a href="/terms" class="font-medium text-primary-600 hover:text-primary-500 dark:text-primary-400 dark:hover:text-primary-300" target="_blank"> Terms and Conditions</a>.
              {formError && formError.toLowerCase().includes('terms') && (
                <p id="terms-error" class="mt-1 text-sm text-red-600 dark:text-red-400">{formError}</p>
              )}
            </div>
          </div>
          
          <div>
            <Button type="submit" fullWidth={true} variant="primary" size="lg">
              Create Account
            </Button>
          </div>
        </form>
        
        <div class="mt-6 text-center">
          <p class="text-sm text-neutral-600 dark:text-neutral-400">
            Already have an account?
            <a href="/auth/login" class="font-medium text-primary-600 hover:text-primary-500 dark:text-primary-400 dark:hover:text-primary-300">Sign in</a>
          </p>
        </div>
      </Fragment>
    </Card>
  </ErrorBoundary>
</AuthLayout>

<script>
  // Enhanced client-side validation
  document.addEventListener('DOMContentLoaded', () => {
    const form = document.getElementById('register-form') as HTMLFormElement;
    
    if (form) {
      form.addEventListener('submit', (e) => {
        const name = form.querySelector('#name') as HTMLInputElement;
        const email = form.querySelector('#email') as HTMLInputElement;
        const password = form.querySelector('#password') as HTMLInputElement;
        const confirmPassword = form.querySelector('#confirmPassword') as HTMLInputElement;
        const acceptTerms = form.querySelector('#acceptTerms') as HTMLInputElement;
        
        let hasError = false;
        
        // Clear previous validation states
        const clearFieldError = (field: HTMLInputElement) => {
          field.classList.remove('border-red-500');
        };
        
        [name, email, password, confirmPassword].forEach(clearFieldError);
        
        // Validate name
        if (!name.value.trim()) {
          hasError = true;
          name.classList.add('border-red-500');
          if (window.showToast) window.showToast('error', 'Please enter your name', 4000);
          name.focus();
          e.preventDefault();
          return;
        }
        
        // Validate email
        if (!email.value.trim()) {
          hasError = true;
          email.classList.add('border-red-500');
          if (window.showToast) window.showToast('error', 'Please enter your email address', 4000);
          email.focus();
          e.preventDefault();
          return;
        } else if (!email.value.includes('@')) {
          hasError = true;
          email.classList.add('border-red-500');
          if (window.showToast) window.showToast('error', 'Please enter a valid email address', 4000);
          email.focus();
          e.preventDefault();
          return;
        }
        
        // Validate password
        if (!password.value) {
          hasError = true;
          password.classList.add('border-red-500');
          if (window.showToast) window.showToast('error', 'Please enter a password', 4000);
          password.focus();
          e.preventDefault();
          return;
        } else if (password.value.length < 8) {
          hasError = true;
          password.classList.add('border-red-500');
          if (window.showToast) window.showToast('error', 'Password must be at least 8 characters', 4000);
          password.focus();
          e.preventDefault();
          return;
        }
        
        // Validate password confirmation
        if (password.value !== confirmPassword.value) {
          hasError = true;
          confirmPassword.classList.add('border-red-500');
          if (window.showToast) window.showToast('error', 'Passwords do not match', 4000);
          confirmPassword.focus();
          e.preventDefault();
          return;
        }
        
        // Validate terms
        if (!acceptTerms.checked) {
          hasError = true;
          if (window.showToast) window.showToast('error', 'You must accept the terms and conditions', 4000);
          acceptTerms.focus();
          e.preventDefault();
          return;
        }
        
        // If no errors, show loading state
        if (!hasError) {
          const submitBtn = form.querySelector('button[type="submit"]');
          if (submitBtn) {
            submitBtn.setAttribute('disabled', 'true');
            submitBtn.textContent = 'Creating Account...';
          }
        }
      });
    }
  });
</script>