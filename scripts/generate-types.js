// scripts/generate-types.js

// IMPORTANT: This script imports TypeScript files directly (.ts).
// To run it, you'll need a TypeScript runner like tsx or ts-node.
// Example: npx tsx scripts/generate-types.js
// Ensure 'tsx' or your chosen runner is listed in devDependencies or installed globally.

import fs from 'fs/promises';
import path from 'path';
import { fileURLToPath } from 'url';

// Adjust the import path to your Drizzle schema .ts file.
// Using tsx or ts-node allows direct import of .ts files.
import * as schema from '../../cloudflare/d1/schema.ts';


const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const TYPES_OUTPUT_DIR = path.join(__dirname, '../src/types/generated');

async function generateTypes() {
  console.log('⏳ Generating TypeScript types from Drizzle schema and custom definitions...');

  await fs.mkdir(TYPES_OUTPUT_DIR, { recursive: true });

  try {
    // Helper to get enum values or return a fallback if not an enum
    const getEnumValuesType = (column: any, fallbackType: string = 'string') => {
      if (column && column.enumValues && column.enumValues.length > 0) {
        return `typeof schema.${column.table.getName()}.${column.name}.enumValues[number]`;
      }
      return fallbackType;
    };
    
    // Prepare UserRole type string
    let userRoleTypeString = `export type UserRole = ${getEnumValuesType(schema.users.role, "'user' | 'admin' /* Define manually if not enum in schema */")};`;
    if (!schema.users.role.enumValues) {
        console.warn("⚠️  Warning: schema.users.role does not appear to be an enum. UserRole type defaulted. Verify definition.");
    }


    const databaseTypesContent = `// Generated helper types for ProperAccount (Database)
// This file is auto-generated by scripts/generate-types.js - do not edit directly

import type { InferSelectModel, InferInsertModel } from 'drizzle-orm';
// Make sure this path correctly points to your Drizzle schema file
import * as schema from '../../../cloudflare/d1/schema';

// --- SELECT TYPES (for reading from DB) ---
export type User = InferSelectModel<typeof schema.users>;
export type Session = InferSelectModel<typeof schema.sessions>;
export type AuthAccount = InferSelectModel<typeof schema.authAccounts>;
export type VerificationToken = InferSelectModel<typeof schema.verificationTokens>;
export type ActivityLog = InferSelectModel<typeof schema.activityLogs>;
export type Entity = InferSelectModel<typeof schema.entities>;
export type EntityAccess = InferSelectModel<typeof schema.entityAccess>; // Added EntityAccess
export type ChartOfAccount = InferSelectModel<typeof schema.chartOfAccounts>;
export type EntityAccount = InferSelectModel<typeof schema.entityAccounts>;
export type Journal = InferSelectModel<typeof schema.journals>;
export type Transaction = InferSelectModel<typeof schema.transactions>;
export type TransactionLine = InferSelectModel<typeof schema.transactionLines>;

// --- INSERT TYPES (for creating new records) ---
export type NewUser = InferInsertModel<typeof schema.users>;
export type NewSession = InferInsertModel<typeof schema.sessions>;
export type NewAuthAccount = InferInsertModel<typeof schema.authAccounts>;
export type NewVerificationToken = InferInsertModel<typeof schema.verificationTokens>;
export type NewActivityLog = InferInsertModel<typeof schema.activityLogs>;
export type NewEntity = InferInsertModel<typeof schema.entities>;
export type NewEntityAccess = InferInsertModel<typeof schema.entityAccess>; // Added NewEntityAccess
export type NewChartOfAccount = InferInsertModel<typeof schema.chartOfAccounts>;
export type NewEntityAccount = InferInsertModel<typeof schema.entityAccounts>;
export type NewJournal = InferInsertModel<typeof schema.journals>;
export type NewTransaction = InferInsertModel<typeof schema.transactions>;
export type NewTransactionLine = InferInsertModel<typeof schema.transactionLines>;

// --- ENUM TYPES (derived from schema) ---
// Ensure the schema definitions for these fields use Drizzle's enum capabilities.
export type AccountType = ${getEnumValuesType(schema.chartOfAccounts.type)};
export type TransactionStatus = ${getEnumValuesType(schema.transactions.status)};
export type VerificationTokenType = ${getEnumValuesType(schema.verificationTokens.type)};
${userRoleTypeString}
// Add other enum types as needed, e.g., for entityAccess.role if it's an enum

// --- EXTENDED TYPES (for API responses or specific use cases) ---
// For actual data fetching with relations, Drizzle's query builder with \`with\` is preferred.
// These are examples and can be customized to your API response needs.

export type EntityWithDetails = Entity & {
  // Example: add related data shapes if you construct these manually
  // parentEntity?: Pick<Entity, 'id' | 'name'>;
  // accessibleBy?: (Pick<User, 'id' | 'email' | 'name'> & { role: string })[];
};

export type TransactionFull = Transaction & {
  lines: (TransactionLine & {
    account?: Pick<ChartOfAccount, 'id' | 'name' | 'code' | 'type'>;
    entityAccount?: Pick<EntityAccount, 'id' | 'customName'>;
  })[];
  entity?: Pick<Entity, 'id' | 'name'>;
  journal?: Pick<Journal, 'id' | 'name'>;
};

// --- API & COMMON UTILITY TYPES ---
export interface ApiResponseSuccess<T = unknown> {
  success: true;
  data: T;
  message?: string; // Optional success message
}

export interface ApiResponseError {
  success: false;
  error: string; // Main error message
  code?: string; // Optional error code (e.g., 'VALIDATION_ERROR', 'NOT_FOUND')
  details?: Record<string, any> | string[]; // Optional detailed error info
}

export type ApiResponse<T = unknown> = ApiResponseSuccess<T> | ApiResponseError;

export interface PaginatedData<T> {
  items: T[];
  totalItems: number;
  totalPages: number;
  currentPage: number;
  pageSize: number;
}

export type PaginatedResponse<T> = ApiResponseSuccess<PaginatedData<T>> | ApiResponseError;
`;

    await fs.writeFile(
      path.join(TYPES_OUTPUT_DIR, 'database.ts'),
      databaseTypesContent
    );

    const validationTypesContent = `// Generated validation related types for ProperAccount
// This file can be used for types that are often related to input validation
// or form data structures, potentially derived from Zod schemas or defined manually.
// This file is auto-generated by scripts/generate-types.js - do not edit directly.

// It's often better to define Zod schemas in your main codebase (e.g., src/lib/validation/schemas.ts)
// and then infer TypeScript types from them directly where needed, e.g.:
// import { z } from 'zod';
// import { myEntitySchema } from '../lib/validation/schemas'; // Assuming this path
// export type MyEntityForm = z.infer<typeof myEntitySchema>;
// This script could potentially read those Zod schema files and generate .d.ts files
// or re-export inferred types, but that adds complexity to this script.
// For now, defining common structured types manually or as examples:

export type DateRange = {
  from: string; // ISO date string (e.g., "YYYY-MM-DD")
  to: string;   // ISO date string
};

export type MoneyInput = {
  amount: string; // Input from forms is often string, validate and convert to number/Decimal.js
  currency: string; // e.g., "USD", "EUR"
};

export type MoneyValue = {
  amountMinorUnits: number; // Amount in cents or smallest currency unit
  currency: string;
};

export type Address = {
  street1: string;
  street2?: string;
  city: string;
  stateOrProvince: string;
  postalCode: string;
  countryCode: string; // ISO 3166-1 alpha-2 (e.g., "US", "CA")
};

// Example for a filter structure that might be used in API query params
export interface ApiFilter {
  field: string;
  operator: 'eq' | 'neq' | 'gt' | 'lt' | 'gte' | 'lte' | 'contains' | 'startsWith' | 'endsWith';
  value: string | number | boolean | string[] | number[];
}

export interface ApiSort {
  field: string;
  direction: 'asc' | 'desc';
}
`;
    await fs.writeFile(
      path.join(TYPES_OUTPUT_DIR, 'common-api.ts'), // Renamed for clarity
      validationTypesContent
    );

    console.log('✅ Type generation completed successfully.');
    console.log(`   Generated files in: ${TYPES_OUTPUT_DIR}`);
    console.log(`   Run with: npx tsx scripts/generate-types.js`);


  } catch (error) {
    console.error('❌ Type generation failed:', error);
    process.exit(1);
  }
}

generateTypes();